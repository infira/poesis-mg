<?php

namespace Infira\pmg;


use Symfony\Component\Console\Input\InputArgument;
use Infira\pmg\helper\Db;
use Infira\pmg\helper\Options;
use Infira\Utils\Dir;
use Infira\Utils\Variable;
use Infira\Utils\Regex;
use Infira\Utils\File;
use Illuminate\Support\Str;
use Infira\console\Command;
use Infira\pmg\templates\ModelTemplate;
use Infira\pmg\templates\ModelShortcutTemplate;
use Nette\PhpGenerator\PhpFile;
use Nette\PhpGenerator\PhpNamespace;
use Infira\pmg\templates\Utils;
use Infira\pmg\templates\DataMethods;
use Nette\PhpGenerator\ClassType;
use Infira\pmg\templates\DbSchemaTemplate;

class Pmg extends Command
{
	const REMOVE_EMPTY_LINE = '[REMOVE_EMPTY_LINE]';
	private $dbName = '';
	
	/**
	 * @var \Infira\pmg\helper\Db
	 */
	private $db;
	/**
	 * @var \Infira\pmg\helper\Options
	 */
	private $opt;
	
	private $destination = '';
	private $madeFiles   = [];
	
	/**
	 * @var ModelShortcutTemplate
	 */
	private $shortcut;
	/**
	 * @var \Infira\pmg\templates\DbSchemaTemplate
	 */
	private $schema;
	
	public function __construct()
	{
		parent::__construct('create');
	}
	
	public function configure(): void
	{
		$this->addArgument('yaml', InputArgument::REQUIRED);
	}
	
	/**
	 * @throws \Exception
	 */
	public function runCommand()
	{
		$yamlFile = $this->input->getArgument('yaml');
		
		if (!file_exists($yamlFile)) {
			$this->error('Config files does not exist');
		}
		$this->opt       = new Options($yamlFile);
		$destinationPath = $this->opt->getDestinationPath();
		$extensionsPath  = $this->opt->getExtensionsPath();
		
		if ($extensionsPath) {
			if ($extensionsPath[0] != '/') {
				$rp             = dirname($yamlFile) . '/' . $extensionsPath;
				$extensionsPath = Dir::fixPath(realpath(dirname($yamlFile) . '/' . $extensionsPath));
				if (!is_dir($extensionsPath)) {
					$this->error("extensions path $rp not found");
				}
			}
			if (!is_dir($extensionsPath)) {
				$this->error("extensions path $extensionsPath not found");
			}
			if (!is_writable($extensionsPath)) {
				$this->error('extensions path not writable');
			}
			$this->opt->setExtensionsPath($extensionsPath);
		}
		
		
		if ($destinationPath[0] != '/') {
			$rp              = dirname($yamlFile) . '/' . $destinationPath;
			$destinationPath = Dir::fixPath(realpath(dirname($yamlFile) . '/' . $destinationPath));
			if (!is_dir($destinationPath)) {
				$this->error("create path $rp not found");
			}
		}
		if (!is_dir($destinationPath)) {
			$this->error("create path $destinationPath not found");
		}
		if (!is_writable($destinationPath)) {
			$this->error('create path not writable');
		}
		$this->destination = Dir::fixPath($destinationPath);
		$this->opt->setDestinationPath($this->destination);
		
		
		$connection   = (object)$this->opt->get('connection');
		$this->db     = new Db('pmg', $connection->host, $connection->user, $connection->pass, $connection->db, $connection->port);
		$this->dbName = $connection->db;
		$this->opt->scanExtensions();
		
		
		$shortcutFileName = $this->opt->getShortcutName() . '.' . $this->opt->getShortcutTraitFileNameExtension();
		$dbSchemaFileName = 'DbSchema.' . $this->opt->getShortcutTraitFileNameExtension();
		$flushExcept      = [$shortcutFileName, $dbSchemaFileName, 'dummy.txt'];
		if (strpos($this->opt->getExtensionsPath(), $this->opt->getDestinationPath()) !== false) {
			$bn = str_replace($this->opt->getDestinationPath(), '', $this->opt->getExtensionsPath());
			if (substr($bn, -1) == '/') {
				$bn = substr($bn, 0, -1);
			}
			$flushExcept[] = $bn;
		}
		foreach (glob("$this->destination*.php") as $classLocation) {
			$fileContent = File::getContent($classLocation);
			if (strpos($fileContent, 'THIS IS AUTOGENERATED FILE') === false) {
				$flushExcept[]     = basename($classLocation);
				$existingClassType = ClassType::fromCode(File::getContent($classLocation));
				$this->opt->addCustomModel($existingClassType->getName());
			}
		}
		Dir::flushExcept($this->destination, $flushExcept);
		
		
		$shortcutFile     = new PhpFile();
		$shortcutPhpCType = $shortcutFile->addTrait($this->constructFullName($this->opt->getShortcutName()));
		$this->shortcut   = new ModelShortcutTemplate($shortcutPhpCType, $shortcutFile);
		
		$dbSchemaFile     = new PhpFile();
		$dbSchemaPhpCType = $dbSchemaFile->addClass($this->constructFullName('DbSchema'));
		$this->schema     = new DbSchemaTemplate($dbSchemaPhpCType, $dbSchemaFile);
		$this->makeTableClassFiles();
		$this->shortcut->addImports($this->opt->getShortcutImports());
		
		$this->shortcut->finalise();
		$this->schema->finalise();
		
		$this->makeFile($shortcutFileName, $shortcutFile->__toString());
		$this->makeFile($dbSchemaFileName, $dbSchemaFile->__toString());
		
		$this->output->region('Made models', function ()
		{
			if ($this->output->isVerbose()) {
				foreach ($this->madeFiles as $file) {
					//$this->output->msg('<fg=#00aaff>Installed file</>: ' . str_replace($this->opt->getDestinationPath(), '', $file));
					$this->output->msg('<fg=#00aaff>Installed file</>: ' . $file);
				}
			}
			else {
				$this->output->info('Made ' . count($this->madeFiles) . ' models into ' . $this->opt->getDestinationPath());
			}
		});
	}
	
	private function constructFullName(string $name): string
	{
		$name = Utils::className($name);
		
		return $this->opt->getNamespace() ? $this->opt->getNamespace() . '\\' . $name : $name;
	}
	
	/**
	 * @throws \Exception
	 */
	private function makeTableClassFiles()
	{
		//$model             = new Model(['isGenerator' => true]);
		$notAllowedColumns = [];//get_class_methods($model);
		
		$tables = $this->db->query("SHOW FULL TABLES");
		if ($tables) {
			$tablesData = [];
			while ($Row = $tables->fetch_object()) {
				$columnName = "Tables_in_" . $this->dbName;
				$tableName  = $Row->$columnName;
				if (!$this->opt->isTableVoided($tableName)) {
					unset($Row->$columnName);
					unset($dbName);
					$columnsRes = $this->db->query("SHOW FULL COLUMNS FROM`" . $tableName . '`');
					
					if (!isset($tablesData[$tableName])) {
						$Table                  = $Row;
						$Table->columns         = [];
						$tablesData[$tableName] = $Table;
					}
					
					while ($columnInfo = $columnsRes->fetch_array(MYSQLI_ASSOC)) {
						$tablesData[$tableName]->columns[$columnInfo['Field']] = $columnInfo;
						if (in_array($columnInfo['Field'], $notAllowedColumns)) {
							$this->error('Column <strong>' . $tableName . '.' . $columnInfo['Field'] . '</strong> is system reserverd');
						}
					}
				}
			}
			
			foreach ($tablesData as $tableName => $Table) {
				$prefix         = $this->opt->getModelClassNamePrefix() ? $this->opt->getModelClassNamePrefix() . '_' : '';
				$modelName      = Utils::className($prefix . $tableName);
				$modelClassName = $modelName;
				if ($this->opt->hasCustomModel($modelName)) {
					$modelClassName .= "Model";
				}
				
				$templateVars                   = [];
				$templateVars["tableName"]      = $tableName;
				$templateVars["className"]      = $modelClassName;
				$templateVars["nodeProperties"] = '';
				
				
				$modelFile = $phpModel = new PhpFile();
				if ($this->opt->getNamespace()) {
					$phpModel = $modelFile->addNamespace($this->opt->getNamespace());
				}
				
				$modelClassType = $phpModel->addClass($modelClassName);
				if ($this->opt->hasCustomModel($modelName)) {
					$modelClassType->setAbstract();
				}
				$phpModel->addUse('\Infira\Poesis\Poesis');
				$phpModel->addUse('\Infira\Poesis\orm\node\Field');
				
				$modelTemplate            = new ModelTemplate($modelClassType, $phpModel);
				$modelTemplate->tableName = $tableName;
				$modelTemplate->addSchemaProperty('table', $tableName);
				$modelTemplate->name = $modelName;
				$modelTemplate->setModelExtender($this->opt->getModelExtender($modelName, $Table->Table_type == 'VIEW'));
				if ($cc = $this->opt->getColumnClass($modelName)) {
					$modelTemplate->setColumnClass($cc);
				}
				if ($this->opt->isModelLogEnabled($modelName)) {
					$modelTemplate->addSchemaProperty('log', true);
				}
				if (($connectionName = $this->opt->getModelConnectionName($modelName)) != 'defaultConnection') {
					$modelTemplate->addSchemaProperty('connection', $connectionName);
				}
				
				
				if ($Table->Table_type == 'VIEW') {
					$modelTemplate->addSchemaProperty('isView', true);
				}
				$TIDColumnName = $this->opt->getTIDColumnName($modelName);
				if ($TIDColumnName !== null and isset($Table->columns[$TIDColumnName])) {
					$modelTemplate->addSchemaProperty('TIDColumn', $TIDColumnName);
				}
				
				$modelTemplate->setTraits($this->opt->getModelTraits($modelName));
				$modelTemplate->setImplements($this->opt->getModelInterfaces($modelName));
				
				if ($result = $this->db->query("SHOW INDEX FROM `$tableName` WHERE Key_name = 'PRIMARY'")) {
					while ($Index = $result->fetch_object()) {
						$modelTemplate->addPrimaryColumn($Index->Column_name);
					}
				}
				
				
				$this->shortcut->addModel($this->constructFullName($modelName));
				
				foreach ($Table->columns as $Column) {
					$columnName      = $Column['Field'];
					$type            = Str::lower(preg_replace('/\(.*\)/m', '', $Column['Type']));
					$type            = strtolower(trim(str_replace("unsigned", "", $type)));
					$Column['fType'] = $type;
					
					$modelTemplate->setColumn($columnName, $Column);
					
					$templateVars["nodeProperties"] .= '
    public $' . $columnName . ';';
					
					
					$isInt    = (strpos($type, "int") !== false);
					$isNumber = (in_array($type, ["decimal", "float", "real", "double"]));
					$isAi     = $Column["Extra"] == "auto_increment";
					$isNull   = $Column["Null"] == "YES";
					
					if ($Column["Extra"] == "auto_increment") {
						$modelTemplate->addSchemaProperty('aiColumn', $columnName);
					}
					
					$signed        = (bool)strpos(strtolower($Column['Type']), "unsigned") !== false;
					$length        = null;
					$allowedValues = [];
					if (preg_match('/(enum|set)\((.+?)\)/m', $Column['Type'])) {
						preg_match_all('/[\'"](.+?)[\'"]/m', $Column['Type'], $numMatches);
						$allowedValues = $numMatches[1];
					}
					else {
						if (strpos($Column['Type'], "(")) {
							$length = str_replace(['(', ',', ')'], ['', '.', ''], Regex::getMatch('/\((.*)\)/m', $Column['Type']));
							if ($isNumber) {
								$ex     = explode(".", $length);
								$length = Utils::literal('[\'d\'=>' . $ex[0] . ',\'p\'=>' . $ex[1] . ',\'fd\'=>' . ($ex[0] - $ex[1]) . ']');
							}
						}
					}
					if (in_array($type, ['timestamp', 'date', 'datetime']) or is_numeric($length)) {
						$length = intval($length);
					}
					if ($isAi) {
						$default = '';
					}
					elseif ($isInt or $isNumber) {
						$default = ($Column['Default'] === null) ? '__poesis_none__' : addslashes($Column['Default']);
					}
					else {
						if ($Column['Default'] === null and $isNull) {
							$default = null;
						}
						elseif ($Column['Default'] === null) {
							$default = '__poesis_none__';
						}
						elseif ($Column['Default'] == "''") {
							$default = '';
						}
						else {
							$default = addslashes($Column['Default']);
						}
						
					}
					$this->schema->setColumn($tableName, $columnName, $type, $signed, $length, $default, $allowedValues, $isNull, $isAi);
				} //EOF each columns
				
				//make index methods
				$indexes = [];
				if ($result = $this->db->query("SHOW INDEX FROM `$tableName`")) {
					while ($Index = $result->fetch_object()) {
						$indexes[$Index->Key_name][] = $Index;
					}
				}
				$indexMethods = array_filter($indexes, function ($var)
				{
					return count($var) > 1;
				});
				$modelTemplate->addIndexMethods($indexMethods);
				$modelTemplate->addImports($this->opt->getModelImports($modelName));
				$this->makeExtras($phpModel, $modelTemplate, $modelName);
				
				$modelTemplate->finalise();
				
				$this->makeFile($modelClassName . '.' . $this->opt->getModelFileNameExtension(), $modelFile->__toString());
			}
		}
	}
	
	private function makeFile(string $fileName, $content)
	{
		$file = $this->destination . $fileName;
		File::delete($file);
		
		$content = str_replace('<?php', File::getContent(realpath(dirname(__FILE__)) . '/templates/php.txt'), $content);
		File::create($file, $content, "w+", 0777);
		
		$this->madeFiles[] = $file;
	}
	
	/**
	 * @param PhpNamespace|PhpFile $phpModel
	 * @param ModelTemplate        $model
	 * @param string               $modelName
	 * @return void
	 */
	private function makeExtras(&$phpModel, ModelTemplate &$model, string $modelName)
	{
		$modelDataMethodsClass = $this->opt->getDataMethodsClass($modelName);
		if (!$this->opt->getMakeNode($modelName)) {
			$model->setDataMethodsClass($modelDataMethodsClass);
			
			return;
		}
		
		$nodeDataMethodsName = Utils::className($modelName . 'NodeDataMethods');
		$model->setDataMethodsClass($this->constructFullName($nodeDataMethodsName));
		$dmClassType = $phpModel->addClass($nodeDataMethodsName);
		$dataMethods = new DataMethods($dmClassType, $phpModel);
		
		$dataMethods->setExtends($modelDataMethodsClass);
		
		
		$nodeExtender = $this->opt->getNodeExtender($modelName);
		$phpModel->addUse($nodeExtender, 'Node');
		
		$dataMethods->setTraits($this->opt->getDataMethodsTraits($modelName));
		
		$getNode = $dataMethods->createMethod('getNode');
		$getNode->setReturnType($nodeExtender)->isReturnNullable();
		$getNode->addParameter('constructorArguments')->setType('array')->setDefaultValue([]);
		$getNode->addBodyLine('return $this->getObject(Node::class, $constructorArguments)');
		
		$getNodes = $dataMethods->createMethod('getNodes');
		$getNodes->setReturnType('array');
		$getNodes->addParameter('constructorArguments')->setType('array')->setDefaultValue([]);
		$getNodes->addBodyLine('return $this->getObjects(Node::class, $constructorArguments)');
		
		$dataMethods->finalise();
		
	}
	
	private function getTemplate($file, $vars = null): string
	{
		$file = realpath(dirname(__FILE__)) . '/templates/' . $file;
		if (!file_exists($file)) {
			$this->error("Installer $file not found");
		}
		$con = File::getContent($file);
		if ($vars) {
			return Variable::assign($vars, $con);
		}
		
		return $con;
	}
}
